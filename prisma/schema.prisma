// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma studio

// 1. Create migration
// ex: npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma --script > prisma/migrations/12132023/migration.sql
// 2. Apply migration
// ex: npx prisma migrate resolve --applied 12132023
// 3. Push (skip to here if prototyping)
// ex: npx prisma db push && npm i

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model InventoryItem {
    id           String             @id @default(cuid())
    createdAt    DateTime           @default(now())
    createdBy    String
    label        String             @default("Unlabeled Inventory Item") @db.VarChar(255)
    sellingPrice Int                @default(0)
    transactions TransactionItems[]

    // concession items
    isConcessionItem Boolean @default(false)
    purchasePrice    Int?
    inStock          Int?    @default(0)

    // admisison items
    isAdmissionItem Boolean  @default(false)
    isSeasonal      Boolean?
    isDay           Boolean?
    patronLimit     Int?
    // todo uncomment if need to connect
    // seasonPasses    SeasonPass[]
}

model SeasonPass {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    createdBy String
    patrons   Patron[]
    // todo uncomment if need to connect
    // invItem   InventoryItem @relation(fields: [invItemId], references: [id])
    // invItemId String

    label              String    @default("Unlabeled Season Pass") @db.VarChar(255)
    effectiveStartDate DateTime  @default(now())
    effectiveEndDate   DateTime?

    // @@index([invItemId])
}

model Patron {
    id         String           @id @default(cuid())
    createdAt  DateTime         @default(now())
    createdBy  String
    pass       SeasonPass       @relation(fields: [passId], references: [id])
    passId     String
    admissions AdmissionEvent[]

    firstName      String
    lastName       String
    birthDate      DateTime?
    banReEntryDate DateTime?

    @@index([passId])
}

model Transaction {
    id        String             @id @default(cuid())
    createdAt DateTime           @default(now())
    createdBy String
    items     TransactionItems[]
}

model TransactionItems {
    transaction   Transaction   @relation(fields: [transactionId], references: [id])
    transactionId String
    item          InventoryItem @relation(fields: [itemId], references: [id])
    itemId        String
    createdAt     DateTime      @default(now())
    createdBy     String
    amountSold    Int           @default(1)

    @@id([transactionId, itemId])
    @@index([transactionId])
    @@index([itemId])
}

model AdmissionEvent {
    id        String   @id @default(cuid())
    patronId  String
    patron    Patron   @relation(fields: [patronId], references: [id])
    createdAt DateTime @default(now())
    createdBy String

    @@index([patronId])
}

model Shift {
    id     String   @id @default(cuid())
    userId String
    start  DateTime
    end    DateTime

    createdBy String
    createdAt DateTime @default(now())
}

model Feedback {
    id        String   @id @default(cuid())
    message   String
    createdBy String
    createdAt DateTime @default(now())
}

model HourCode {
    id              String           @id @default(cuid())
    label           String
    hourlyRate      Int
    timeclockEvents TimeClockEvent[]
    userSettings    UserSettings[]

    createdBy String
    createdAt DateTime @default(now())
}

model TimeClockEvent {
    id         String   @id @default(cuid())
    userId     String
    hourCodeId String
    hourCode   HourCode @relation(fields: [hourCodeId], references: [id])
    createdBy  String
    createdAt  DateTime @default(now())

    @@index([hourCodeId])
}

// keep old coll for now. need plan to migrate to new coll
// ? unless they match needs exactly
model UserSettings {
    id                String    @id @default(cuid())
    userId            String    @unique
    defaultHourCodeId String?
    defaultHourCode   HourCode? @relation(fields: [defaultHourCodeId], references: [id])
    canModifyHourCode Boolean   @default(false) // move to perm
    clockPIN          String?   @unique
    isAdmin           Boolean   @default(false) // move to perm / remove
    canSchedule       Boolean   @default(false) // move to perm

    createdBy String
    createdAt DateTime @default(now())

    @@index([defaultHourCodeId])
}

// todo add new EmployeeProfile collection
// create mermaid ERD for collections

// --- AUTH --- 
// basically get rid of all this -> employeeManager / employeeProfile
model User {
    id        String     @id @default(uuid())
    username  String     @unique
    password  String
    firstName String?
    lastName  String?
    email     String?    @unique
    roles     UserRole[] // Many-to-many relationship with Role through UserRole join table

    // Audit fields
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? // Nullable for soft deletes
    createdBy String? // Nullable if no user is logged in
    updatedBy String?
    deletedBy String?
}

model Role {
    id          String           @id @default(cuid())
    name        String
    users       UserRole[] // Many-to-many relationship with User through UserRole join table
    permissions RolePermission[] // Many-to-many relationship with Permission through RolePermission join table

    createdBy  String
    createdAt  DateTime @default(now())
    modifiedBy String
    modifiedAt DateTime @default(now())
}

model Permission {
    id    String           @id @default(cuid())
    roles RolePermission[] // Many-to-many relationship with Role through RolePermission join table

    createdBy  String
    createdAt  DateTime @default(now())
    modifiedBy String
    modifiedAt DateTime @default(now())
}

model UserRole {
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@id([userId, roleId]) // Composite primary key
    @@unique([userId, roleId]) // Ensure unique pairs
    @@index([roleId])
}

model RolePermission {
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@id([roleId, permissionId]) // Composite primary key
    @@unique([roleId, permissionId]) // Ensure unique pairs
    @@index([permissionId])
}
